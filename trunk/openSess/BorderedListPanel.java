package openSess;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

/*
 * Author:      andreas
 * Created:     27.02.2005
 * Revision ID: $Id: BorderedListPanel.java 48 2005-03-01 11:12:27Z awi $
 */

/**
 * BorderedListPanel is the base class for the panels used in the
 * MainWindow. It is basically a JPanel with a titled border that 
 * contains a JList. Derived classes can add other components.
 * BorderedListPanel will process all ActionEvents generated by
 * AbstractButtons and will forward their ActionCommands to
 * processCommand(). The processCommand() provided by BorderedListPanel
 * processes the command getEditCommand() by calling edit()
 * on the ListEditWindow provided in the contructor.
 *  
 * @author andreas
 */
public class BorderedListPanel
  extends JPanel
  implements ActionListener, CommandProcessor
{
  private Solver                  solver;
  private ChangeMonitor           monitor;
  private ListEditWindow          editWindow;
  private JList                   list;
  private SharedDataComboBoxModel boxModel;
  
  /**
   * Construct a new BorderedListPanel. The panel is a JPanel with the 
   * orientation given by the axis parameter. The panel will have a border
   * in which a title is displayed and it contains a JList. The panel is 
   * associated with a ListEditWindow which will be displayed whenever 
   * the ActionCommand returned by getEditCommand() is processed. 
   * The BorderedListPanel also maintains references to a Solver and a 
   * ChangeMonitor.
   * 
   * @param title      the title displayed in the border.
   * @param solver     the Solver object.
   * @param monitor    the ChangeMonitor object.
   * @param editWindow the ListEditWindow.
   * @param axis       the orientation of the JPanel.
   */
  public BorderedListPanel(String title, Solver solver, ChangeMonitor monitor,
                           ListEditWindow editWindow, int axis)
  {
    super(); 
    this.solver     = solver;
    this.monitor    = monitor;
    this.editWindow = editWindow;
    
    setLayout(new BoxLayout(this, axis));
    setBorder(createBorder(title));
    
    list = new JList();
    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    list.addMouseListener(new DoubleClickListener(getEditCommand(), this));
    list.addKeyListener(new EnterListener(getEditCommand(), this));
  }

  /**
   * Hide the associated ListEditWindow.
   */
  public void hideEditor()
  {
    editWindow.setVisible(false);
  }

  /**
   * Return the Solver object.
   * 
   * @return the Solver object.
   */
  protected Solver getSolver()
  {
    return solver;
  }
  
  /**
   * Return the ChangeMonitor.
   * 
   * @return the ChangeMonitor.
   */
  protected ChangeMonitor getChangeMonitor()
  {
    return monitor;
  }
  
  /**
   * Return the list object.
   * 
   * @return the list object.
   */
  protected JList getList()
  {
    return list;
  }
  
  /**
   * Set the currently selected item of the list.
   * 
   * @param index the index of the item to select.
   */
  public void setSelectedIndex(int index)
  {
    if (index < list.getComponentCount())
      list.setSelectedIndex(index);
  }
  
  /**
   * Return the ActionCommand which will trigger the ListEditWindow
   * of this panel.
   * 
   * @return the ActionCommand.
   */
  protected String getEditCommand()
  {
    return "edit";
  }
  
  /**
   * Reconfigure the panel with a new Solver object and a new list model
   * for the list.
   *  
   * @param solver    the new Solver object.
   * @param listModel the new list model.
   */
  public void reconfigure(Solver solver, DefaultListModel listModel)
  {
    this.solver = solver;
    boxModel = new SharedDataComboBoxModel(listModel);
    list.setModel(boxModel);
    
    if (list.getComponentCount() > 0)
      list.setSelectedIndex(0);
  }
  
  /**
   * Create a TitledBorder with a given title.
   * 
   * @param title the title.
   * @return a newly created TitledBorder.
   */
  protected TitledBorder createBorder(String title)
  {
    Border border = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
    TitledBorder titled = BorderFactory.createTitledBorder(border, title);
    titled.setTitleJustification(TitledBorder.LEFT);
    return titled;
  }
  
  /**
   * Check for events caused by AbstractButtons and convert them
   * to calls of processCommand.
   */
  public void actionPerformed(ActionEvent e)
  {
    Object source = e.getSource();
    
    if (AbstractButton.class.isAssignableFrom(source.getClass()))
    {
      AbstractButton item = (AbstractButton)source;
      processCommand(item.getActionCommand());
    }
  }
  
  /**
   * Process tha command returned by getEditCommand() by calling
   * edit() on the ListEditWindow.
   */
  public void processCommand(String command)
  {
    if (command.equals(getEditCommand()))
      editWindow.edit(boxModel, getSolver(), getList().getSelectedIndex(), getChangeMonitor());
  }
}
